* bumpve
** bump algorithm
Validate the input string against a semver regular expression.
If it does not conform to the formatting rules exit on an error state.
Split the input string to its most fundamental constituent parts.
Bump the user selected identifier according to the bumping rules of the
constituent part it is a member of.
Each token that has a lower precedence than the selected identifier should be
reset to its virgin state according to the bumping rules of the constituent part
it is a member of.
Return the new version.
** Parsing Semantic versions
A string which conforms to the Semantic versioning scheme 2.0 is considered a
valid *semantic version* or *semver* for short.

The constituent parts that make up a semver are:

CORE
PRE-RELEASE
BUILD

Each of the constituent parts shall be labeled henceforth as *element* and
collectively as the *elements*.

Each of the elements is identified by their respective *${ELEMENT}_RE*

An element is further broken down into *identifers*.

The CORE element's form is fixed as per the specification to:
x.y.z
Where [ x, y, z ] are each numbers of any length without leading 0's.

The PRE-RELEASE element's form is not fixed as per the specification. It only
imposes limits on the available characters.

** Options
-a --auto
shall append missing element and identifiers as neccessary if the target element
is missing.
** stitch identifier
Should stitch only the identifier being bumped.
** stitch leading identifiers
Should stitch the identifiers up to and including the one being bumped.
** stitch element
Should stitch the whole element
** stitch trailing
Should stitch trailing identifiers across element boundaries up to and including
the one being bumped.
** stitch semver
** stitch all
